// SPDX-License-Identifier: GP-3.0
pragma solidity >=0.5.0 <0.8.0;

contract Factory{
    uint idDigits = 16;
    uint idModulus = 10 ** idDigits;
    struct Product{
        string name;
        uint id;
        //product Pipe = product ("pipe", "m")

    }
    Product[] public products;
    event NewProduct (uint ArrayProductId, string name, uint id)
    function _createProduct (string memory _name, uint _id) private{
        //createProduct ("pipe", 100);
        uint 
        products.push (Product(_name, _id));
        emit 
    }
    function _generateRandomId(string memory _str) private view
        returns (uint){
    
        uint rand = uint(keccak256(abi.encodePacked(_str)));
        return rand % idModulus;
    }
    function createRandomProduct(string memory _name) public
        returns (uint){

        uint randId = _generateRandomId (_name);
        _createProduct(_name,randId);
    }

    event NewProduct(uint ProductId, string name, uint id);
    function _createProduct(string memory _name, uint id) private {
        //uint ArrayProductId=products.push(Product(_name,id)
        //array.push(NewProduct(_arrayProductId,_name));
        products.push(Product(_name,id));
        uint ProductId=(products.length- 1);
        emit NewProduct(ProductId,_name,id);
   }

    mapping(uint=>address) public productToOwner;
    mapping(address=>uint) OwnerProductCount;

    function Ownership (uint _ProductId) public {
    productToOwner[msg.sender] = _ProductId ;
    OwnerProductCount += msg.sender; 
    }

    function getProductsByOwner (address _owner) external view 
    returns(uint[] memory) {
        uint counter = 0;
        uint array = OwnerProductCount[_owner];
        uint[] memory result = new uint[] (array);
    for (uint i = 0; i< products.length; i++) {
       if (productToOwner[i]== _owner){
         result[counter]= i;
         counter++;
       }
    }
     return result;

   }
    mapping (uint => uint) public age;
    modifier olderThan (uint _age, uint _userId)
    {
      require( _userId >= _age );
              _;
    }
    function validationUsers( uint _userId) public view olderThan(18,_userId) {

    }

}
